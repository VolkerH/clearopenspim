// For building exe launch4j must be found on the path
buildscript {
	repositories 
	{
    jcenter()
    mavenLocal()
    mavenCentral()
	}

	dependencies 
	{ 
	 classpath 'edu.sc.seis.gradle:launch4j:1.0.6'
	 classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2' 
	}
}


plugins {
    id "com.jfrog.bintray" version "1.2"
    id "us.kirchmeier.capsule" version "1.0.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'launch4j'
apply plugin: 'javafx-gradle-plugin'
apply plugin: 'application'


sourceSets
{
	main
	{
		java
		{ srcDir 'src' }
		resources
		{  srcDir 'src' }
	}
	test
	{
		java
		{ srcDir 'src' }
		resources
		{  srcDir 'src' }
	}
}


sourceCompatibility = 1.8
group = 'net.clearcontrol'
version = "0.0.1"

test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}

configurations.all
{
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies
{
    compile 'net.imglib2:imglib2:4.6.1'

    compile ('net.clearcontrol:picard4dusbstage:0.0.1') {transitive= true; changing= true}

    // SpimCAT:
    compile ('de.mpicbg.rhaase:postprocessing-utilities:0.2.9')  {transitive= true; changing= true}

    // FastFuse:
    compile ('net.clearcontrol:fastfuse:0.6.4')      {transitive= true; changing= true}

    // ClearControl:
    compile ('net.clearcontrol:clearcontrol-lightsheet-csbd:0.0.1')      {transitive= true; changing= true}

	compile group: 'junit', name: 'junit', version: '4.11'
	testCompile group: 'junit', name: 'junit', version: '4.11'
}

repositories
{
    // main repos:

    mavenLocal()
    mavenCentral()
    // maven {url "C:\\Users\\myersadmin\\.m2\\repository"}
    maven { url "http://oss.sonatype.org/content/groups/public"} 
    maven { url "http://mvnrepository.com/artifact" }

    // ClearControl:
    maven { url  "http://maven.imagej.net/content/repositories/releases" }
    maven { url  "http://maven.imagej.net/content/repositories/public" }
    maven { url  "http://maven.imagej.net/content/repositories/snapshots" }
    maven { url  "http://dl.bintray.com/clearcontrol/ClearControl"  }
    maven { url  "http://dl.bintray.com/haesleinhuepf/snapshots"  }

    //bio formats
    maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases" }
    maven { url "http://artifacts.openmicroscopy.org/artifactory/maven/"}

    // ClearVolume: 
    maven { url "http://dl.bintray.com/clearvolume/ClearVolume" }

    //imglib2:
    maven { url  "http://maven.imagej.net/content/repositories/releases" }
    maven { url  "http://maven.imagej.net/content/repositories/snapshots" }
    maven { url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases/" }
    
    //jfxtras:
    maven { url "https://mvnrepository.com/artifact/org.jfxtras/jfxtras-labs" }
    
    //FontAwesome
    maven { url  "http://dl.bintray.com/jerady/maven" }
    
    //Sqeazy:
    maven {url  "http://dl.bintray.com/sqeazy/maven" }

}


task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task xwingapp(type: FatCapsule) {
	applicationClass 'openspim.main.OpenSPIMMain'
	baseName "xwingapp_${getDate()}.jar"
	reallyExecutable
}

launch4j {
	mainClassName = "openspim.main.OpenSPIMMain"
	jar = 'xwingapp${getDate()}.jar'
}


artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
        }
    }
}


apply from: 'gradle/bintrayUpload.gradle'


//***********************************************************************************
// APP PACKAGING

// configure javafx-gradle-plugin
// for all available settings please look at the class "JavaFXGradlePluginExtension"
jfx {
    verbose = true
    mainClass = "openspim.main.OpenSPIMMain"
    jfxAppOutputDir = "build/jfx/app"
    jfxMainAppJarName = "openspim.jar"
    
    // gradle jfxJar
    css2bin = false
    preLoader = null // String
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = false

    // gradle jfxNative
    identifier = null  // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "Loic Royer"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = null // Map<String, String>
    jvmArgs = null  // List<String> ["Xmx10G","XX:CompileThreshold=100", "XX:+AggressiveOpts"]
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = version
    needShortcut = false
    needMenu = false
    bundleArguments = [
        // dont bundle JRE (not recommended, but increases build-size/-speed)
        runtime: null
    ]
    appName = "XWing" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/windows/project.ico"
    additionalBundlerResources = null // path to some additional resources for the bundlers when creating application-bundle
    additionalAppResources = null // path to some additional resources when creating application-bundle
    secondaryLaunchers = [[appName:"somethingDifferent"], [appName:"somethingDifferent2"]]
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
    customBundlers = null // List<String>
    skipNativeLauncherWorkaround205 = false

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false

    // gradle jfxRun
    runJavaParameter = null // String
    runAppParameter = null // String

    // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
    alternativePathToJarFile = null // String

    // to disable patching of ant-javafx.jar, set this to false
    usePatchedJFXAntLib = true

    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
    checkForAbsolutePaths = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}




import java.text.DateFormat
import java.text.SimpleDateFormat


def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy_MM_dd_HH_mm_ss')
    return formattedDate.toString()
}




